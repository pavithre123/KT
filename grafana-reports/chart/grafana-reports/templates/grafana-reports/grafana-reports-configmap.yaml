{{ $externalConfigDir := .Values.externalConfigDir }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-grafana-reports-configmap
  namespace : {{ .Release.Namespace }}
data:
{{- if .Files.Get (printf "%s/grafana-reports/ss_grafana.py" $externalConfigDir) }}
  ss_grafana.py: |-
{{ tpl (.Files.Get (printf "%s/grafana-reports/ss_grafana.py" $externalConfigDir)) . | indent 4 }}
{{ else }}
  ss_grafana.py: |-
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from webdriver_manager.chrome import ChromeDriverManager
    import time

    # Setup Chrome driver with headless option
    # service = Service(ChromeDriverManager().install())
    service = Service("/grafana-reports/chromedriver-linux64/chromedriver")
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--window-size=1920,5000")  # Set initial window size
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")

    driver = webdriver.Chrome(service=service, options=chrome_options)

    try:
        driver.get("{{ .Values.grafanaReport.grafana.dashboard }}")
        # driver.get("http://grafana.axp.com/d/3X-EcUm4ka/axp-gateway-traffic-dashboard-pdfa?orgId=1&from=now-12h&to=now")

        # Wait for the login fields to be present
        username_field = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.NAME, 'user'))
        )
        password_field = driver.find_element(By.NAME, 'password')

        # Enter credentials
        username_field.send_keys("{{ .Values.grafanaReport.grafana.username }}")
        password_field.send_keys("{{ .Values.grafanaReport.grafana.password }}")

        # Submit the form
        login_button = driver.find_element(By.XPATH, '//button[@type="submit"]')
        login_button.click()

        # Wait for the dashboard to load
        time.sleep(10)

        # print(total_height)
        driver.set_window_size(1920, 5000)
        print("All dashboards are loaded with data.")

        # Take a screenshot of the entire page
        dashboard_area = driver.find_element(By.XPATH, '//*[@class="react-grid-layout"]')
        # driver.save_screenshot("full_ss.png")
        dashboard_area.screenshot("dashboard_area.png")

    finally:
        driver.quit()
{{- end }}

{{- if .Files.Get (printf "%s/grafana-reports/inline-mail.py" $externalConfigDir) }}
  inline-mail.py: |-
{{ tpl (.Files.Get (printf "%s/grafana-reports/inline-mail.py" $externalConfigDir)) . | indent 4 }}
{{ else }}
  inline-mail.py: |-
    import smtplib
    from email.mime.text import MIMEText
    from email.mime.multipart import MIMEMultipart
    from email.mime.image import MIMEImage
 
    # Configuration
    port = "{{ .Values.grafanaReport.smtp.port }}"
    smtp_server = "{{ .Values.grafanaReport.smtp.host }}"
    login = "{{ .Values.grafanaReport.smtp.username }}"
    password = "{{ .Values.grafanaReport.smtp.password }}"

    sender_email = "{{ .Values.grafanaReport.smtp.sender }}"
    receiver_email = "{{ .Values.grafanaReport.smtp.receiver }}"

    # Email content
    subject = "HTML Email with Inline Image from configmap"
    html = """\
    <html>
      <body>
        <p>Hi,<br>
        This is a <b>test</b> email with an inline image sent using Python.</p>
        <p><img src="cid:image1"></p>
      </body>
    </html>
    """

    # Create a multipart message and set headers
    message = MIMEMultipart()
    message["From"] = sender_email
    message["To"] = receiver_email
    message["Subject"] = subject

    # Attach the HTML part
    message.attach(MIMEText(html, "html"))

    # Open the image file in binary mode and attach it
    # with open("/home/pavithra-121252/Documents/sre/Support/week-3/ss/dashboard_area.png", "rb") as img_file:
    with open("/grafana-reports/scripts/dashboard_area.png", "rb") as img_file:
        img = MIMEImage(img_file.read())
        img.add_header("Content-ID", "<image1>")
        message.attach(img)

    # Send the email
    with smtplib.SMTP(smtp_server, port) as server:
        server.starttls()
        server.login(login, password)
        server.sendmail(sender_email, receiver_email, message.as_string())

    print('Sent')
{{- end }}

{{- if .Files.Get (printf "%s/grafana-reports/dalily-reports.sh" $externalConfigDir) }}
  dalily-reports.sh: |-
{{ tpl (.Files.Get (printf "%s/grafana-reports/dalily-reports.sh" $externalConfigDir)) . | indent 4 }}
{{ else }}
  dalily-reports.sh: |-
    #!/bin/bash

    python3 ss_grafana.py
    python3 inline-mail.py
{{- end }}